#
# Luofixedpoints.ode
#
# XPP ODE file for the vector field: Luofixedpoints
#
# This file was generated by the program VFGEN, version: 2.5.0
# Generated on 22-Nov-2019 at 10:09
#
number Ki=145
number Nao=140
number Nai=18
number PRNaK=0.01833
number R=8.3144598
number Kelvin=310.15
number Faraday=96.485332
number cda=0.095
number cdb=0.07
number cfa=0.012
number cfb=0.0065
number cxa=5.0E-4
number cxb=0.0013
number cxi=2.837
number cK1a=1.02
number cK1b=0.49124
number Vda=-5.0
number Vdb=44.0
number Vfa=28.0
number Vfb=30.0
number Vxa=50.0
number Vxb=20.0
number Vxi1=77.0
number Vxi2=35.0
number sda1=-0.01
number sda2=-0.072
number sdb1=-0.017
number sdb2=0.05
number sfa1=-0.008
number sfa2=0.15
number sfb1=-0.02
number sfb2=-0.2
number sxa1=0.083
number sxa2=0.057
number sxb1=-0.06
number sxb2=-0.04
number sxi=0.04
number sK1a=0.2385
number sK1b1=0.08032
number sK1b2=0.06175
number sK1b3=-0.5143
number sKp=0.16722408026755852842
number gK1w=0.6047
number gKp=0.0183
number gb=0.03921
number VKp=7.488
number Vb=59.87
#
par C=1.0
par Ko=5.4
par shiftd=0.0
par shiftf=0.0
par gKw=0.282
par gCa=0.09
par VCa=80.0
#
gK=(0.43033148291193520945)*gKw*sqrt(Ko)
gK1=(0.43033148291193520945)*sqrt(Ko)*gK1w
VK=Faraday^(-1)*log((PRNaK*Nao+Ko)*(Ki+PRNaK*Nai)^(-1))*R*Kelvin
VK1=Faraday^(-1)*R*log(Ki^(-1)*Ko)*Kelvin
alphad_inf=exp((Vda+V-shiftd)*sda1)*(1+exp(sda2*(Vda+V-shiftd)))^(-1)*cda
betad_inf=exp((V+Vdb-shiftd)*sdb1)*(1+exp((V+Vdb-shiftd)*sdb2))^(-1)*cdb
alphad_tau=cda*(1+exp(sda2*(Vda+V)))^(-1)*exp((Vda+V)*sda1)
betad_tau=exp(sdb1*(V+Vdb))*(1+exp(sdb2*(V+Vdb)))^(-1)*cdb
alphaf_inf=cfa*exp(-sfa1*(shiftf-V-Vfa))*(1+exp(-sfa2*(shiftf-V-Vfa)))^(-1)
betaf_inf=cfb*exp(-(shiftf-Vfb-V)*sfb1)*(1+exp(-sfb2*(shiftf-Vfb-V)))^(-1)
alphaf_tau=cfa*(1+exp(sfa2*(V+Vfa)))^(-1)*exp(sfa1*(V+Vfa))
betaf_tau=exp((Vfb+V)*sfb1)*(1+exp(sfb2*(Vfb+V)))^(-1)*cfb
alphax=exp(sxa1*(Vxa+V))*cxa*(1+exp(sxa2*(Vxa+V)))^(-1)
betax=exp((V+Vxb)*sxb1)*(1+exp((V+Vxb)*sxb2))^(-1)*cxb
taud=(betad_tau+alphad_tau)^(-1)
tauf=(alphaf_tau+betaf_tau)^(-1)
taux=(alphax+betax)^(-1)
dinf=alphad_inf*(alphad_inf+betad_inf)^(-1)
finf=(alphaf_inf+betaf_inf)^(-1)*alphaf_inf
xinf=(alphax+betax)^(-1)*alphax
xi=(-1+exp((Vxi1+V)*sxi))*cxi*(Vxi1+V)^(-1)*exp((Vxi2+V)*sxi)^(-1)
alphaK1=(1+exp((-59.215+V-VK1)*sK1a))^(-1)*cK1a
betaK1=(1+exp((4.753+V-VK1)*sK1b3))^(-1)*(cK1b*exp(sK1b1*(5.476+V-VK1))+exp(sK1b2*(-594.31+V-VK1)))
K1inf=(alphaK1+betaK1)^(-1)*alphaK1
Kp=(1+exp(sKp*(VKp-V)))^(-1)
ICa=f*(V-VCa)*gCa*d
IK=-xi*x*(VK-V)*gK
IK1=gK1*K1inf*(V-VK1)
IKp=Kp*gKp*(V-VK1)
Ib=gb*(V+Vb)
#
# The vector field and initial conditions
#
V'=-C^(-1)*(Ib+IK+IK1+IKp+ICa)
init V=-84.62489735771413
d'=C^(-1)*(dinf-d)*taud^(-1)
init d=0.0029579236344697423
f'=-tauf^(-1)*(f-finf)
init f=0.9999815125223762
x'=-taux^(-1)*(x-xinf)
init x=0.005600428418480647
#
done
